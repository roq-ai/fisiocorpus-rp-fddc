generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model clinic {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?   @db.VarChar(255)
  image       String?   @db.VarChar(255)
  name        String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user_id     String    @db.Uuid
  tenant_id   String    @db.VarChar(255)
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient     patient[]
}

model intervention {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String   @db.VarChar(255)
  patient_id  String?  @db.Uuid
  user_id     String?  @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  patient     patient? @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model patient {
  id                                       String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                     String         @db.VarChar(255)
  clinic_id                                String?        @db.Uuid
  physiotherapist_id                       String?        @db.Uuid
  pilates_instructor_id                    String?        @db.Uuid
  created_at                               DateTime       @default(now()) @db.Timestamp(6)
  updated_at                               DateTime       @default(now()) @db.Timestamp(6)
  intervention                             intervention[]
  clinic                                   clinic?        @relation(fields: [clinic_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_patient_physiotherapist_idTouser    user?          @relation("patient_physiotherapist_idTouser", fields: [physiotherapist_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_patient_pilates_instructor_idTouser user?          @relation("patient_pilates_instructor_idTouser", fields: [pilates_instructor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                                          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                       String         @unique @db.VarChar(255)
  firstName                                   String?        @db.VarChar(255)
  lastName                                    String?        @db.VarChar(255)
  roq_user_id                                 String         @db.VarChar(255)
  tenant_id                                   String         @db.VarChar(255)
  created_at                                  DateTime       @default(now()) @db.Timestamp(6)
  updated_at                                  DateTime       @default(now()) @db.Timestamp(6)
  clinic                                      clinic[]
  intervention                                intervention[]
  patient_patient_physiotherapist_idTouser    patient[]      @relation("patient_physiotherapist_idTouser")
  patient_patient_pilates_instructor_idTouser patient[]      @relation("patient_pilates_instructor_idTouser")
}
